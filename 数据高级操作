数据高级操作：
  新增数据：
    基本语法：
      insert into 表名[(字段列表)] values(值列表);
    主键冲突：
      在数据插入的时候，假设主键对应的值已经存在，插入就会失败！
      
      当主键存在冲突的时候，可以选择性进行处理：更新和替换
      
      更新操作：
        insert into 表名[(字段列表)] values(值列表) on duplicate key update 字段 = 新值;
        -- 创建带有主键的表
        create table my_class(
          number varchar(10) primary key,
          room varchar(20),
          )charset utf8;
        -- 插入一条数据
        insert into my_class('0001', 'B205');
        
        -- 插入一条主键冲突的数据
        insert into my_class('0001', 'B205') on duplicate key update room = 'B205'
        
      替换操作：
        replace into 表名[(字段列表)] values(值列表);    -- 当有主键冲突的时候直接替换冲突行，没有冲突的时候正常插入
        
        
    蠕虫复制：
      蠕虫复制：从已有的数据中获取数据，然后又将数据进行新增操作，数据成倍增加
      
      表创建的高级操作：从已有表创建新表（复制表结构）：
      create table 表名 like 数据库.表名；
      -- 复制创建表
      create table my_copy like my_class; -- 只复制表结构，不复制数据
      
      蠕虫复制: 先查出数据，然后将查出的数据新增一遍
      insert into 目标表名[(字段列表)] select 字段列表/* from 源表名;
      
      -- 蠕虫复制my_class中的数据
      insert into my_copy select * from my_class;
      
    蠕虫复制的意义：
      1. 从已有表中拷贝数据到新表中
      2. 可以迅速的让表中的数据膨胀到一定的数量级，测试表的压力以及效率
      
      
      
      
      
      
      
