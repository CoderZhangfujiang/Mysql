范式
  范式（normal format）:是一种离散数学中的知识，是为了解决数据的存储与优化的问题
保存数据的存储之后，凡是能够通过关系寻找出的数据，坚决不重复存储，最终目标是为了减少数据的冗余

范式是一种分层结构的规范，分为六层，每一层都比上一层严格，若要满足下一层范式必须限满足上一层范式

由于范式只解决空间的问题  但是数据库的设计不但要解决空间问题，还要解决效率问题，所以一般情况下只需要满足前三种范式

范式在数据库设计中有指导意义，但是不强制要求

1NF：
  第一范式，在设计表存储数据的时候，如果表中设计的字段中存储的数据在取出来之前还需要额外的处理（拆分），那么说表的
设计不满足第一范式，第一范式要求字段的数据要有原子性

不满足第一范式的情况一般通过拆分字段就可以解决

2NF：
  第二范式，在数据表设计的过程中，如果有复合主键（多字段主键），且表中有字段并不是由整个主键来确定，
而是依赖主键中的某个字段，那么说表的设计不满足第二范式

  解决方案1:  拆分表
  解决方案2: 取消复合主键，使用逻辑主键，通过唯一键来约束复合主键的唯一性
  
3NF:
  第三范式，要满足点啊范式必须满足第二范式，
  一张表中的所有字段都应该依赖主键（逻辑主键除外），如果表设计中存在一个字段，并不直接依赖主键，而是通过某个非主键字段依赖，
最终实现依赖主键，把这种不是直接依赖主键，而是依赖非主键字段的依赖关系称之为传递依赖。第三范式就是要解决传递依赖的问题

  解决方案：将存在传递依赖的字段以及依赖的字段取出，形成单独的表，然后在需要对应信息的时候使用对应的实体表主键即可
  


逆规范化：
  有时候，在设计数据表的时候，为了提升查询效率，如果一张表中有几个字段是需要从另外的表中取获取，我们会刻意在某些表中不去保存另外表中的主键（逻辑主键）
而是直接保存想要的信息，但是会导致数据冗余增加

  逆规范化是磁盘利用率与数据库效率的对抗
  










